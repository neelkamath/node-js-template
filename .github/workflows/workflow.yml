on:
  push:
    branches: [staging, prod]
  pull_request:
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: '16'
          cache: yarn
      - run: yarn
      - run: yarn lint:check
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: '16'
          cache: yarn
      - run: yarn
      - run: yarn test:unit
  integration-tests:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:password@localhost:5433/postgres
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: '16'
          cache: yarn
      - # Even though we don't run the <api> Docker Compose service, <docker compose> fails because it parses every
        # service's config. As a workaround, we create an empty <.env> file.
        name: Create .env to satisfy Docker Compose config
        run: touch .env
      - name: Start the services
        run: docker compose --profile dev -f docker/docker-compose.yml up --build -d
      - run: yarn
      - name: Create the DB schema
        run: yarn prisma migrate dev
      - run: yarn test:integration
      - name: Stop the services
        run: docker compose --profile dev -f docker/docker-compose.yml down
  tag:
    if: github.ref_name == 'prod'
    needs: [lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: yarn
      - name: Set $VERSION
        run: echo "VERSION=$(yarn env | grep npm_package_version | grep -Eo '[0-9.]*')" >> $GITHUB_ENV
      - run: yarn
      - run: zip -r docs.zip docs/index.html docs/openapi.yaml
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v$VERSION docs.zip \
            -t v$VERSION \
            -n "[Changelog](https://github.com/neelkamath/node-js-template/blob/v$VERSION/docs/CHANGELOG.md)" \
            $([[ $VERSION = 0* ]] && echo '-p')
  deploy:
    if: github.ref_name == 'staging' || github.ref_name == 'prod'
    needs: [lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: yarn
      - name: Log in to AWS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region us-east-1
      - name: Log in to Docker registry
        run: |
          aws ecr get-login-password \
              | docker login --username AWS --password-stdin 482654357301.dkr.ecr.us-east-1.amazonaws.com
      - name: Build Docker image
        run: |
          docker build . \
              -t 482654357301.dkr.ecr.us-east-1.amazonaws.com/node-js-template:$GITHUB_REF_NAME \
              -f docker/node-js-template/Dockerfile
      - name: Push to Docker registry
        run: docker push 482654357301.dkr.ecr.us-east-1.amazonaws.com/node-js-template:$GITHUB_REF_NAME
      - name: Deploy staging Docker image to AWS Fargate
        if: github.ref_name == 'staging'
        run: |
          aws ecs update-service \
              --cluster NodeJsTemplate-Staging \
              --service NodeJsTemplate \
              --force-new-deployment
      - name: Deploy prod Docker image to AWS Fargate
        if: github.ref_name == 'prod'
        run: |
          aws ecs update-service \
              --cluster NodeJsTemplate-Prod \
              --service NodeJsTemplate \
              --force-new-deployment
